package HotelBooking.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class BookingManager__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x7f67387345c45fbL, 0xbd3e45c50d906ea1L, 0x47b154f6f9643586L, "HotelBooking.structure.BookingManager");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<Boolean> checkValidRoomAndDate_id4JMmwCXSPo6 = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("checkValidRoomAndDate").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4JMmwCXSPo6").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter(Integer.TYPE, ""), SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<Boolean> inDateRange_id4JMmwCXSWni = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("inDateRange").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4JMmwCXSWni").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(checkValidRoomAndDate_id4JMmwCXSPo6, inDateRange_id4JMmwCXSWni);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static boolean checkValidRoomAndDate_id4JMmwCXSPo6(@NotNull SNode __thisNode__, SNode nd, int roomNumber, String name) {
    for (int i = 0; i < SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0x7f67387345c45fbL, 0xbd3e45c50d906ea1L, 0x47b154f6f9643586L, 0x47b154f6f9643587L, "Bookings")).size(); i++) {
      SNode book = SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0x7f67387345c45fbL, 0xbd3e45c50d906ea1L, 0x47b154f6f9643586L, 0x47b154f6f9643587L, "Bookings")).get(i);
      if (name != SPropertyOperations.getString(SNodeOperations.cast(book, MetaAdapterFactory.getConcept(0x7f67387345c45fbL, 0xbd3e45c50d906ea1L, 0x47b154f6f964356bL, "HotelBooking.structure.Booking")), MetaAdapterFactory.getProperty(0x7f67387345c45fbL, 0xbd3e45c50d906ea1L, 0x47b154f6f964356bL, 0x47b154f6f9643580L, "CustomerName"))) {
        if (SPropertyOperations.getInteger(SNodeOperations.cast(book, MetaAdapterFactory.getConcept(0x7f67387345c45fbL, 0xbd3e45c50d906ea1L, 0x47b154f6f964356bL, "HotelBooking.structure.Booking")), MetaAdapterFactory.getProperty(0x7f67387345c45fbL, 0xbd3e45c50d906ea1L, 0x47b154f6f964356bL, 0x4bf25a0a3dc08386L, "roomNumber")) == roomNumber) {
          if (((boolean) BookingManager__BehaviorDescriptor.inDateRange_id4JMmwCXSWni.invoke(__thisNode__, nd, SLinkOperations.getTarget(SNodeOperations.cast(book, MetaAdapterFactory.getConcept(0x7f67387345c45fbL, 0xbd3e45c50d906ea1L, 0x47b154f6f964356bL, "HotelBooking.structure.Booking")), MetaAdapterFactory.getContainmentLink(0x7f67387345c45fbL, 0xbd3e45c50d906ea1L, 0x47b154f6f964356bL, 0x4bf25a0a3dcc0bf3L, "CheckIn")), SLinkOperations.getTarget(SNodeOperations.cast(book, MetaAdapterFactory.getConcept(0x7f67387345c45fbL, 0xbd3e45c50d906ea1L, 0x47b154f6f964356bL, "HotelBooking.structure.Booking")), MetaAdapterFactory.getContainmentLink(0x7f67387345c45fbL, 0xbd3e45c50d906ea1L, 0x47b154f6f964356bL, 0x4bf25a0a3dcca052L, "CheckOut"))))) {
            return false;
          }
        }
      }
    }
    return true;
  }
  /*package*/ static boolean inDateRange_id4JMmwCXSWni(@NotNull SNode __thisNode__, SNode nd, SNode checkIn, SNode CheckOut) {
    if (SPropertyOperations.getInteger(nd, MetaAdapterFactory.getProperty(0x7f67387345c45fbL, 0xbd3e45c50d906ea1L, 0x47b154f6f964358bL, 0x47b154f6f9643591L, "Year")) < SPropertyOperations.getInteger(checkIn, MetaAdapterFactory.getProperty(0x7f67387345c45fbL, 0xbd3e45c50d906ea1L, 0x47b154f6f964358bL, 0x47b154f6f9643591L, "Year")) || SPropertyOperations.getInteger(nd, MetaAdapterFactory.getProperty(0x7f67387345c45fbL, 0xbd3e45c50d906ea1L, 0x47b154f6f964358bL, 0x47b154f6f9643591L, "Year")) > SPropertyOperations.getInteger(CheckOut, MetaAdapterFactory.getProperty(0x7f67387345c45fbL, 0xbd3e45c50d906ea1L, 0x47b154f6f964358bL, 0x47b154f6f9643591L, "Year"))) {
      return false;
    }
    if (SPropertyOperations.getInteger(nd, MetaAdapterFactory.getProperty(0x7f67387345c45fbL, 0xbd3e45c50d906ea1L, 0x47b154f6f964358bL, 0x47b154f6f964358eL, "Month")) < SPropertyOperations.getInteger(checkIn, MetaAdapterFactory.getProperty(0x7f67387345c45fbL, 0xbd3e45c50d906ea1L, 0x47b154f6f964358bL, 0x47b154f6f964358eL, "Month")) || SPropertyOperations.getInteger(nd, MetaAdapterFactory.getProperty(0x7f67387345c45fbL, 0xbd3e45c50d906ea1L, 0x47b154f6f964358bL, 0x47b154f6f964358eL, "Month")) > SPropertyOperations.getInteger(CheckOut, MetaAdapterFactory.getProperty(0x7f67387345c45fbL, 0xbd3e45c50d906ea1L, 0x47b154f6f964358bL, 0x47b154f6f964358eL, "Month"))) {
      return false;
    }
    if (SPropertyOperations.getInteger(nd, MetaAdapterFactory.getProperty(0x7f67387345c45fbL, 0xbd3e45c50d906ea1L, 0x47b154f6f964358bL, 0x47b154f6f964358cL, "Day")) < SPropertyOperations.getInteger(checkIn, MetaAdapterFactory.getProperty(0x7f67387345c45fbL, 0xbd3e45c50d906ea1L, 0x47b154f6f964358bL, 0x47b154f6f964358cL, "Day")) || SPropertyOperations.getInteger(nd, MetaAdapterFactory.getProperty(0x7f67387345c45fbL, 0xbd3e45c50d906ea1L, 0x47b154f6f964358bL, 0x47b154f6f964358cL, "Day")) > SPropertyOperations.getInteger(CheckOut, MetaAdapterFactory.getProperty(0x7f67387345c45fbL, 0xbd3e45c50d906ea1L, 0x47b154f6f964358bL, 0x47b154f6f964358cL, "Day"))) {
      return false;
    }
    return true;
  }

  /*package*/ BookingManager__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Boolean) checkValidRoomAndDate_id4JMmwCXSPo6(node, (SNode) parameters[0], ((int) (Integer) parameters[1]), (String) parameters[2]));
      case 1:
        return (T) ((Boolean) inDateRange_id4JMmwCXSWni(node, (SNode) parameters[0], (SNode) parameters[1], (SNode) parameters[2]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}

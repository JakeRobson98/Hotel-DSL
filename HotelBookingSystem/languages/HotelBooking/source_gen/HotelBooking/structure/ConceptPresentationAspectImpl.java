package HotelBooking.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Bed;
  private ConceptPresentation props_Booking;
  private ConceptPresentation props_BookingManager;
  private ConceptPresentation props_Chargeable;
  private ConceptPresentation props_Date;
  private ConceptPresentation props_Facility;
  private ConceptPresentation props_Hotel;
  private ConceptPresentation props_Room;
  private ConceptPresentation props_StandardRoom;
  private ConceptPresentation props_Studio;
  private ConceptPresentation props_Suite;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Bed:
        if (props_Bed == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Bed concept.");
          cpb.rawPresentation("Bed");
          props_Bed = cpb.create();
        }
        return props_Bed;
      case LanguageConceptSwitch.Booking:
        if (props_Booking == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Customers can create bookings for available rooms.");
          cpb.rawPresentation("Booking");
          props_Booking = cpb.create();
        }
        return props_Booking;
      case LanguageConceptSwitch.BookingManager:
        if (props_BookingManager == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Manager for all bookings in system.");
          cpb.rawPresentation("Booking Manager");
          props_BookingManager = cpb.create();
        }
        return props_BookingManager;
      case LanguageConceptSwitch.Chargeable:
        if (props_Chargeable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Chargeable = cpb.create();
        }
        return props_Chargeable;
      case LanguageConceptSwitch.Date:
        if (props_Date == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Date type that consists of day, month and year.");
          cpb.rawPresentation("Date");
          props_Date = cpb.create();
        }
        return props_Date;
      case LanguageConceptSwitch.Facility:
        if (props_Facility == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Object which has a facility type");
          cpb.rawPresentation("Facility");
          props_Facility = cpb.create();
        }
        return props_Facility;
      case LanguageConceptSwitch.Hotel:
        if (props_Hotel == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("This is a Hotel which holds rooms.");
          cpb.presentationByName();
          props_Hotel = cpb.create();
        }
        return props_Hotel;
      case LanguageConceptSwitch.Room:
        if (props_Room == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Abstract concept of rooms inside Hotel.");
          props_Room = cpb.create();
        }
        return props_Room;
      case LanguageConceptSwitch.StandardRoom:
        if (props_StandardRoom == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("This is a standard room including basic facilities such as a bathroom, kitchen and combined living and bedroom space.");
          cpb.rawPresentation("StdRoom");
          props_StandardRoom = cpb.create();
        }
        return props_StandardRoom;
      case LanguageConceptSwitch.Studio:
        if (props_Studio == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("This is the same as a standard room with additional living space (a lounge).");
          cpb.rawPresentation("studio");
          props_Studio = cpb.create();
        }
        return props_Studio;
      case LanguageConceptSwitch.Suite:
        if (props_Suite == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("This is a luxury suite including a lounge, kitchen and separate bedrooms.");
          cpb.rawPresentation("suite");
          props_Suite = cpb.create();
        }
        return props_Suite;
    }
    return null;
  }
}

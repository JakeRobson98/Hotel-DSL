package HotelBooking.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class Date__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x7f67387345c45fbL, 0xbd3e45c50d906ea1L, 0x47b154f6f964358bL, "HotelBooking.structure.Date");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<Boolean> isValid_id4JMmwCXN_Pl = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isValid").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4JMmwCXN_Pl").registry(REGISTRY).build();
  public static final SMethod<Integer> Compare_id4JMmwCXN_Q8 = new SMethodBuilder<Integer>(new SJavaCompoundTypeImpl(Integer.TYPE)).name("Compare").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4JMmwCXN_Q8").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(Object.class, ""));
  public static final SMethod<String> getDate_id795K_Xpyloh = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getDate").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("795K_Xpyloh").registry(REGISTRY).build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(isValid_id4JMmwCXN_Pl, Compare_id4JMmwCXN_Q8, getDate_id795K_Xpyloh);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static boolean isValid_id4JMmwCXN_Pl(@NotNull SNode __thisNode__) {
    return true;
  }
  /*package*/ static int Compare_id4JMmwCXN_Q8(@NotNull SNode __thisNode__, Object date) {
    return 0;
  }
  /*package*/ static String getDate_id795K_Xpyloh(@NotNull SNode __thisNode__) {
    String str = new String(SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f67387345c45fbL, 0xbd3e45c50d906ea1L, 0x47b154f6f964358bL, 0x47b154f6f964358cL, "Day")) + "," + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f67387345c45fbL, 0xbd3e45c50d906ea1L, 0x47b154f6f964358bL, 0x47b154f6f964358eL, "Month")) + "," + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f67387345c45fbL, 0xbd3e45c50d906ea1L, 0x47b154f6f964358bL, 0x47b154f6f9643591L, "Year")));
    return str;
  }

  /*package*/ Date__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Boolean) isValid_id4JMmwCXN_Pl(node));
      case 1:
        return (T) ((Integer) Compare_id4JMmwCXN_Q8(node, (Object) parameters[0]));
      case 2:
        return (T) ((String) getDate_id795K_Xpyloh(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
